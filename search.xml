<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Codeforces Global Round 13</title>
    <url>/2021/03/01/2021-3-1/</url>
    <content><![CDATA[<h1 id="Codeforces-Global-Round-13"><a href="#Codeforces-Global-Round-13" class="headerlink" title="Codeforces Global Round 13"></a>Codeforces Global Round 13</h1><a id="more"></a>

<h2 id="A-K-th-Largest-Value-1491A"><a href="#A-K-th-Largest-Value-1491A" class="headerlink" title="A K-th Largest Value (1491A)"></a>A K-th Largest Value (1491A)</h2><p>签到题</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">bool</span> a[<span class="hljs-number">200000000</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,x=<span class="hljs-number">0</span>,m;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n+<span class="hljs-number">1</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> c;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;c;<br>        a[i]=<span class="hljs-keyword">bool</span>(c);<br>        <span class="hljs-keyword">if</span>(c)x++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> p1,p2;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;p1&gt;&gt;p2;<br>        <span class="hljs-keyword">if</span>(p1==<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[p2])x--;<br>            <span class="hljs-keyword">else</span> x++;<br>            a[p2]=!a[p2];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(p2&gt;x)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;0&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;1&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h2 id="B-Minimal-Cost-1491B"><a href="#B-Minimal-Cost-1491B" class="headerlink" title="B Minimal Cost (1491B)"></a>B Minimal Cost (1491B)</h2><p>如果有相邻输入相差大于 1 的情况，可直接通过，花费为 0 ；</p>
<p>如果输入值全相同，那么将某一个障碍先横向移动一次，然后将其横向移动或者纵向移动一次均可</p>
<p>花费 min(v+v , u+v);</p>
<p>其余情况把某个合适障碍横向或者纵向移动一次均可，花费 min(u , v) 。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n,u,v,test=<span class="hljs-number">0</span>,x=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;u&gt;&gt;v;<br>        <span class="hljs-keyword">int</span> a[n+<span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[i]-a[i<span class="hljs-number">-1</span>])&gt;=<span class="hljs-number">2</span>)test=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(a[i]==a[i<span class="hljs-number">-1</span>])x++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(test)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;0&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==n<span class="hljs-number">-1</span>)<span class="hljs-built_in">cout</span>&lt;&lt;min(v+v,u+v)&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;min(u,v)&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h2 id="C-Pekora-and-Trampoline-1491C"><a href="#C-Pekora-and-Trampoline-1491C" class="headerlink" title="C Pekora and Trampoline (1491C)"></a>C Pekora and Trampoline (1491C)</h2><p>题解如下（官方题解）（等我自己看懂了再补上吧……）</p>
<p><img src="/img/posts/20210301/1491C.png"></p>
<p>&nbsp;</p>
]]></content>
      <categories>
        <category>算法学习</category>
        <category>解题报告</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 703&amp;704 （div 2)</title>
    <url>/2021/02/27/2021-2-27/</url>
    <content><![CDATA[<h1 id="Codeforces-Round-703-amp-704-div-2"><a href="#Codeforces-Round-703-amp-704-div-2" class="headerlink" title="Codeforces Round #703&amp;704 (div 2)"></a>Codeforces Round #703&amp;704 (div 2)</h1><p>&nbsp; <a id="more"></a> </p>
<h2 id="703"><a href="#703" class="headerlink" title="#703"></a>#703</h2><h3 id="A-Shifting-Stacks-1486A"><a href="#A-Shifting-Stacks-1486A" class="headerlink" title="A Shifting Stacks (1486A)"></a>A Shifting Stacks (1486A)</h3><p>签到题，只需从 i=n 开始对前 i 项求和，判断该和的值是否不小于 (i-1) * i/2 ，i 逐步递减，直到 i=1 。如果均满足和值不小于 (i-1) * i/2，输出 “ YES ” 。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">computesum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    sum+=a[i];<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;x;j++)<br>    &#123;<br>            <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> a[n]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    <span class="hljs-keyword">bool</span> test=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> s=computesum(a,i);<br>        <span class="hljs-keyword">if</span>(s&lt;((i*(i<span class="hljs-number">-1</span>))/<span class="hljs-number">2</span>))<br>        &#123;<br>            test=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(test)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p> &nbsp;</p>
<h3 id="B-Eastern-Exhibition-1486B"><a href="#B-Eastern-Exhibition-1486B" class="headerlink" title="B Eastern Exhibition (1486B)"></a>B Eastern Exhibition (1486B)</h3><p>找中位数的个数，因为是曼哈顿距离，所以横纵坐标互不影响，可以分别求横距离和纵距离后再求和。对于一个维度，如果房子个数为奇数，就只有中位数代表的位置是 “最优解” ，个数为 1；房子个数为偶数，则最中间的两个房子之间的所有位置（包括其本身所在位置）均为“ 最优解 ”。最后将两个维度的 “ 最优解 ”个数相乘即可。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> num;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;num;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)<br>    &#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x[<span class="hljs-number">1001</span>]=&#123;<span class="hljs-number">0</span>&#125;,y[<span class="hljs-number">1001</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    <span class="hljs-built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];<br>    <span class="hljs-keyword">if</span>((n%<span class="hljs-number">2</span>)==<span class="hljs-number">1</span>)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        sort(x,x+n);<br>        sort(y,y+n);<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a=x[n/<span class="hljs-number">2</span>]-x[n/<span class="hljs-number">2</span><span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> b=y[n/<span class="hljs-number">2</span>]-y[n/<span class="hljs-number">2</span><span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> c=a*b;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h2 id="704"><a href="#704" class="headerlink" title="#704"></a>#704</h2><h3 id="A-Three-Swimmers-1492A"><a href="#A-Three-Swimmers-1492A" class="headerlink" title="A Three Swimmers (1492A)"></a>A Three Swimmers (1492A)</h3><p>签到题，用 p 模游泳一来回的时间，再用该时间减去上一步模的结果。注意模的结果如果为 0 ，那就直接得到 0 这一结果而不用减。这一步实际上是算 “ 这个人还有多久游回来” 。最后找三个结果的最小值。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        LL x,a,b,c;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        <span class="hljs-keyword">if</span>(x%a)a=a-x%a;<br>        <span class="hljs-keyword">else</span> a=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(x%b)b=b-x%b;<br>        <span class="hljs-keyword">else</span> b=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(x%c)c=c-x%c;<br>        <span class="hljs-keyword">else</span> c=<span class="hljs-number">0</span>;<br>        LL r;<br>        r=a;<br>        <span class="hljs-keyword">if</span>(r&gt;b)r=b;<br>        <span class="hljs-keyword">if</span>(r&gt;c)r=c;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h3 id="B-Card-Deck-1492B"><a href="#B-Card-Deck-1492B" class="headerlink" title="B Card Deck (1492B)"></a>B Card Deck (1492B)</h3><p>题意是不断从后面开始截取原数组的一段，原封不动地放到新数组的后面。直接从原数组中找最大的数，然后将其之后的所有数截取下来放到新数组后。在原数组剩下的数中不断重复该操作，直至全部移动完。但是本题对时间的要求比较高，所以在实际操作中，可以先记录下所有 “ 剩下的数里面最大数的位置 ”，方法是从左端开始，只要出现比左侧值更大的数，就把这个数的位置记录一次，那么扫描结束之后从右往左的这些位置就依次是每次操作的 “ 截取点 ”，从而避免了对剩下的数的重复搜索。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 100010</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> a[inf],b[inf],c[inf],an,cn=<span class="hljs-number">0</span>,curr=<span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        cn=<span class="hljs-number">0</span>;curr=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;an;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an;i++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>            <span class="hljs-keyword">if</span>(curr&lt;a[i])<br>            &#123;<br>                curr=a[i];<br>                c[cn]=i;<br>                cn++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>,r=an,t=<span class="hljs-number">0</span>;<br>        cn--;<br>        <span class="hljs-keyword">while</span>(cn!=<span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;r-c[cn];i++)<br>            *(b+t+i)=*(a+c[cn]+i);<br>            t+=r-c[cn];<br>            r-=(r-c[cn]);<br>            cn--;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an;i++)<br>        <span class="hljs-built_in">cout</span>&lt;&lt;b[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h3 id="C-Maximum-Width-1492C"><a href="#C-Maximum-Width-1492C" class="headerlink" title="C Maximum Width (1492C)"></a>C Maximum Width (1492C)</h3><p>啥也别说了，看了题解才做出来……</p>
<p>简单说一下思路。对于 t 串中的第 i 个元素，可以在 s 串中找到最靠左侧的能满足要求的一个元素，也有最靠右的这样的元素。找出这些元素的位置（用一个 int 表示排在第几位）。找最靠左侧的满足要求的元素，就是从 t 串的第一个元素开始，在 s 串中从左端开始一直向右找对应元素，不能向左返回。注意找到对应元素之后指针一定要再向右移动一位。最靠右侧的同理。最后从 0 开始到 m-2为止找 max( 右(i + 1) - 左i )。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> a[<span class="hljs-number">200005</span>],b[<span class="hljs-number">200005</span>];<br>    <span class="hljs-keyword">int</span> n,m;<br>    <span class="hljs-keyword">int</span> min[<span class="hljs-number">200005</span>],max[<span class="hljs-number">200005</span>];<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">int</span> pa=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    <span class="hljs-built_in">cin</span>&gt;&gt;b[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">while</span>(a[pa]!=b[<span class="hljs-number">0</span>])pa++;<br>    min[<span class="hljs-number">0</span>]=pa;<br>    pa++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;b[i];<br>        <span class="hljs-keyword">while</span>(a[pa]!=b[i])pa++;<br>        min[i]=pa;<br>        pa++;<br>    &#125;<br>    pa=n<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=m<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(a[pa]!=b[i])pa--;<br>        max[i]=pa;<br>        pa--;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>,curr=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m<span class="hljs-number">-1</span>;i++)<br>    <span class="hljs-keyword">if</span>(ans&lt;(curr=max[i+<span class="hljs-number">1</span>]-min[i]))ans=curr;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>剩下的题看能不能哪天去补吧……</p>
]]></content>
      <categories>
        <category>算法学习</category>
        <category>解题报告</category>
      </categories>
      <tags>
        <tag>思维</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>穷竭搜索(含dfs, bfs)</title>
    <url>/2021/02/26/2021-2-26/</url>
    <content><![CDATA[<h2 id="穷竭搜索"><a href="#穷竭搜索" class="headerlink" title="穷竭搜索"></a>穷竭搜索</h2><p>&nbsp;</p>
<h4 id="暴力枚举"><a href="#暴力枚举" class="headerlink" title="暴力枚举"></a>暴力枚举</h4><p>略</p>
<p>&nbsp;</p>
<h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><p>深度优先搜索（图中数字代表搜索顺序）</p>
<p>隐含栈，搜索过程中将新出现的待搜索状态压入栈，下一次搜索从栈中取出的状态为刚刚入栈的状态。</p>
<p><img src="/img/posts/20210226/dfs.png"></p>
<p>&nbsp;</p>
<h5 id="例题-洛谷P1451"><a href="#例题-洛谷P1451" class="headerlink" title="例题 洛谷P1451"></a>例题 洛谷P1451</h5><hr>
<h6 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h6><p>一矩形阵列由数字 0 到 9 组成，数字 1 到 9 代表细胞，细胞的定义为沿细胞数字上下左右若还是细胞数字则为同一细胞，求给定矩形阵列的细胞个数。</p>
<h6 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h6><p>第一行两个整数代表矩阵大小 <em>n</em> 和 <em>m</em>。</p>
<p>接下来 <em>n</em> 行，每行一个长度为 <em>m</em> 的只含字符 <code>0</code> 到 <code>9</code> 的字符串，代表这个  <em>n</em>×<em>m</em> 的矩阵。</p>
<h6 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h6><p>一行一个整数代表细胞个数。</p>
<h6 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h6><p>输入</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">10</span><br><span class="hljs-number">0234500067</span><br><span class="hljs-number">1034560500</span><br><span class="hljs-number">2045600671</span><br><span class="hljs-number">0000000089</span><br></code></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>

<hr>
<h6 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h6><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> x[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>],lx,ly;<br><br><span class="hljs-keyword">int</span> dy[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> dx[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    x[a][b]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> xx=b+dx[i];<br>        <span class="hljs-keyword">int</span> yy=a+dy[i];<br>        <span class="hljs-keyword">if</span>(xx&gt;=<span class="hljs-number">0</span>&amp;&amp;xx&lt;lx&amp;&amp;yy&gt;=<span class="hljs-number">0</span>&amp;&amp;yy&lt;ly&amp;&amp;x[yy][xx]!=<span class="hljs-number">0</span>)<br>        dfs(yy,xx);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;ly&gt;&gt;lx;<br>    <span class="hljs-keyword">int</span> r=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ly;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;lx;j++)<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%1d&quot;</span>,&amp;x[i][j]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ly;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;lx;j++)<br>    <span class="hljs-keyword">if</span>(x[i][j]!=<span class="hljs-number">0</span>)<br>    &#123;<br>        r++;<br>        dfs(i,j);<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;r;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h4 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h4><p>宽度优先搜索（数字代表搜索顺序）</p>
<p>运用队列，新出现的待搜索状态放到队尾，等平行的所有搜索状态搜索完后才开始取出下一层的状态。</p>
<p><img src="/img/posts/20210226/bfs.png"></p>
<p>&nbsp;</p>
<h5 id="例题-UVA439"><a href="#例题-UVA439" class="headerlink" title="例题 UVA439"></a>例题 UVA439</h5><hr>
<h6 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h6><p>输入8*8的国际象棋棋盘上的2个格子（列：a<del>h，行：1</del>8），求马至少多少步从起点（键盘输入的第一个位置）跳到终点（键盘输入的第二个位置）。</p>
<h6 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例"></a>输入输出样例</h6><p>输入</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">e2</span> e<span class="hljs-number">4</span><br><span class="hljs-attribute">a1</span> b<span class="hljs-number">2</span><br><span class="hljs-attribute">b2</span> c<span class="hljs-number">3</span><br><span class="hljs-attribute">a1</span> h<span class="hljs-number">8</span><br><span class="hljs-attribute">a1</span> h<span class="hljs-number">7</span><br><span class="hljs-attribute">h8</span> a<span class="hljs-number">1</span><br><span class="hljs-attribute">b1</span> c<span class="hljs-number">3</span><br><span class="hljs-attribute">f6</span> f<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">To</span> <span class="hljs-builtin-name">get</span> <span class="hljs-keyword">from</span> e2 <span class="hljs-keyword">to</span> e4 takes 2 knight moves.<br><span class="hljs-keyword">To</span> <span class="hljs-builtin-name">get</span> <span class="hljs-keyword">from</span> a1 <span class="hljs-keyword">to</span> b2 takes 4 knight moves.<br><span class="hljs-keyword">To</span> <span class="hljs-builtin-name">get</span> <span class="hljs-keyword">from</span> b2 <span class="hljs-keyword">to</span> c3 takes 2 knight moves.<br><span class="hljs-keyword">To</span> <span class="hljs-builtin-name">get</span> <span class="hljs-keyword">from</span> a1 <span class="hljs-keyword">to</span> h8 takes 6 knight moves.<br><span class="hljs-keyword">To</span> <span class="hljs-builtin-name">get</span> <span class="hljs-keyword">from</span> a1 <span class="hljs-keyword">to</span> h7 takes 5 knight moves.<br><span class="hljs-keyword">To</span> <span class="hljs-builtin-name">get</span> <span class="hljs-keyword">from</span> h8 <span class="hljs-keyword">to</span> a1 takes 6 knight moves.<br><span class="hljs-keyword">To</span> <span class="hljs-builtin-name">get</span> <span class="hljs-keyword">from</span> b1 <span class="hljs-keyword">to</span> c3 takes 1 knight moves.<br><span class="hljs-keyword">To</span> <span class="hljs-builtin-name">get</span> <span class="hljs-keyword">from</span> f6 <span class="hljs-keyword">to</span> f6 takes 0 knight moves.<br></code></pre></td></tr></table></figure>

<hr>
<h6 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h6><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 0x3f3f3f3f</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; p;<br><br><span class="hljs-keyword">int</span> dx[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-1</span>&#125;;<br><span class="hljs-keyword">int</span> dy[]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x1,<span class="hljs-keyword">int</span> y1,<span class="hljs-keyword">int</span> x2,<span class="hljs-keyword">int</span> y2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br>    <span class="hljs-built_in">queue</span>&lt;p&gt; que;<br>    que.push(p(x1,y1));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">8</span>;j++)<br>    a[i][j]=inf;<br>    a[x1][y1]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!que.empty())<br>    &#123;<br>        p q=que.front();<br>        que.pop();<br>        <span class="hljs-keyword">if</span>(q.first==x2&amp;&amp;q.second==y2)<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> x=q.first+dx[i];<br>            <span class="hljs-keyword">int</span> y=q.second+dy[i];<br>            <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">7</span>||x&lt;<span class="hljs-number">0</span>||y&gt;<span class="hljs-number">7</span>||y&lt;<span class="hljs-number">0</span>||a[x][y]!=inf)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                a[x][y]=a[q.first][q.second]+<span class="hljs-number">1</span>;<br>                que.push(p(x,y));<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a[x2][y2];<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> k[<span class="hljs-number">6</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c%c%c%c%c%*c&quot;</span>,&amp;k[<span class="hljs-number">1</span>],&amp;k[<span class="hljs-number">2</span>],&amp;k[<span class="hljs-number">3</span>],&amp;k[<span class="hljs-number">4</span>],&amp;k[<span class="hljs-number">5</span>])==<span class="hljs-number">5</span>)<br>    &#123;<br>    <span class="hljs-keyword">int</span> a,b,c,d; <br>    a=k[<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>    b=k[<span class="hljs-number">2</span>]-<span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-number">-1</span>;<br>    c=k[<span class="hljs-number">4</span>]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>    d=k[<span class="hljs-number">5</span>]-<span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> x=bfs(a,b,c,d);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;To get from &quot;</span>&lt;&lt;k[<span class="hljs-number">1</span>]&lt;&lt;k[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-string">&quot; to &quot;</span>&lt;&lt;k[<span class="hljs-number">4</span>]&lt;&lt;k[<span class="hljs-number">5</span>]&lt;&lt;<span class="hljs-string">&quot; takes &quot;</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot; knight moves.&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p>&nbsp;</p>
<p>另：一个关于搜索的网站<a href="https://www.redblobgames.com/pathfinding/a-star/introduction.html">click here</a></p>
]]></content>
      <categories>
        <category>算法学习</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>dfs</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度计算器</title>
    <url>/2021/02/23/2021-2-23/</url>
    <content><![CDATA[<h3 id="2020-2021寒假大作业——高精度计算器"><a href="#2020-2021寒假大作业——高精度计算器" class="headerlink" title="2020-2021寒假大作业——高精度计算器"></a>2020-2021寒假大作业——高精度计算器</h3><p>&nbsp;</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>模仿竖式计算</p>
<p>逆波兰算法，将中缀表达式转换为后缀表达式</p>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>负数和小数的加减乘除乘方阶乘运算<a id="more"></a></p>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>格式正确的表达式（均为半角符号）</p>
<ul>
<li>加       +</li>
<li>减       -</li>
<li>乘       *</li>
<li>除       /</li>
<li>幂       ^</li>
<li>阶乘   !</li>
<li>括号   ()</li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 65535</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getN</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[n]!=<span class="hljs-string">&#x27;\0&#x27;</span>)n++;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">absint</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">string</span> x;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>        &#123;<br>            x+=a[i];        <br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">examformat</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">bool</span> t=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)t=<span class="hljs-number">1</span>;<br>    a=absint(a);<br>    <span class="hljs-keyword">int</span> n=getN(a);<br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>,r=n<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(a[l]==<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;a[l+<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;.&#x27;</span>)l++;<br>    <span class="hljs-keyword">bool</span> dot=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>    dot=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(dot)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(a[r]==<span class="hljs-string">&#x27;0&#x27;</span>||a[r]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>        r--;<br>    &#125;<br>    <span class="hljs-built_in">string</span> result;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=l;i&lt;=r;i++)<br>    &#123;<br>        result+=a[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t&amp;&amp;result[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;\0&#x27;</span>)result=<span class="hljs-string">&quot;-&quot;</span>+result;<br>    <span class="hljs-keyword">if</span>(result[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;\0&#x27;</span>)result=<span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">inttofloat</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    a=examformat(a);<br>    <span class="hljs-keyword">bool</span> test=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)test=<span class="hljs-number">1</span>;<br>    a=absint(a);<br>    <span class="hljs-keyword">int</span> an=getN(a);<br>    <span class="hljs-built_in">string</span> result;<br>    <span class="hljs-keyword">if</span>(n&lt;an)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an-n;i++)<br>        result+=a[i];<br>        <span class="hljs-keyword">if</span>(n!=<span class="hljs-number">0</span>)result+=<span class="hljs-string">&#x27;.&#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=an-n;i&lt;an;i++)<br>        result+=a[i];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        result+=<span class="hljs-string">&quot;0.&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n-an;i++)<br>        result+=<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n-an;i&lt;n;i++)<br>        result+=a[i+an-n];<br>    &#125;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    n=getN(result);<br>    <span class="hljs-keyword">while</span>(result[i]!=<span class="hljs-string">&#x27;.&#x27;</span>&amp;&amp;result[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)i++;<br>    <span class="hljs-keyword">if</span>(i==n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(test)result=<span class="hljs-string">&quot;-&quot;</span>+result;<br>        result=examformat(result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;result[n<span class="hljs-number">-1</span>-j]==<span class="hljs-string">&#x27;0&#x27;</span>;j++);<br>        <span class="hljs-keyword">if</span>(result[n<span class="hljs-number">-1</span>-j]==<span class="hljs-string">&#x27;.&#x27;</span>)j++;<br>        <span class="hljs-built_in">string</span> finalresult;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;n-j;k++)finalresult+=result[k];<br>        <span class="hljs-keyword">if</span>(test)finalresult=<span class="hljs-string">&quot;-&quot;</span>+finalresult;<br>        finalresult=examformat(finalresult);<br>        <span class="hljs-keyword">return</span> finalresult;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">floattoint</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-keyword">int</span> b)</span><span class="hljs-comment">//移动b位 b一定大于小数点后有效位数</span></span><br><span class="hljs-function"></span>&#123;<br>    a=examformat(a);<br>    <span class="hljs-built_in">string</span> subresult,result;<br>    <span class="hljs-keyword">int</span> an=getN(a);<br>    <span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>,tb=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[n]!=<span class="hljs-string">&#x27;.&#x27;</span>&amp;&amp;a[n]!=<span class="hljs-string">&#x27;\0&#x27;</span>)n++;<br>    <span class="hljs-keyword">if</span>(n==an)result=a;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)subresult+=a[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n+<span class="hljs-number">1</span>;i&lt;an;i++)<br>        &#123;<br>            subresult+=a[i];<br>            tb++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(subresult[i]==<span class="hljs-string">&#x27;0&#x27;</span>)i++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;subresult[j]!=<span class="hljs-string">&#x27;\0&#x27;</span>;j++)<br>        result+=subresult[j];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=tb;i&lt;b;i++)result+=<span class="hljs-string">&#x27;0&#x27;</span>;<br>    result=examformat(result);<br>    <span class="hljs-keyword">return</span> result;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">compareint</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> la=getN(a);<br>    <span class="hljs-keyword">int</span> lb=getN(b);<br>    <span class="hljs-keyword">if</span>(la&gt;lb)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(la&lt;lb)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;la;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]&gt;b[i])<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(a[i]&lt;b[i])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> an=getN(a);<br>    <span class="hljs-keyword">int</span> bn=getN(b);<br>    <span class="hljs-keyword">int</span> N=an;<br>    <span class="hljs-keyword">if</span>(an&lt;bn)N=bn;<br>    <span class="hljs-keyword">int</span> aa[N]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an;i++)<br>        aa[i]=a[an<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">int</span> bb[N]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;bn;i++)<br>        bb[i]=b[bn<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">int</span> s[N+<span class="hljs-number">1</span>],c[N+<span class="hljs-number">1</span>];<br>    c[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    &#123;<br>        s[i]=(aa[i]+bb[i]+c[i])%<span class="hljs-number">10</span>;<br>        c[i+<span class="hljs-number">1</span>]=(aa[i]+bb[i]+c[i])/<span class="hljs-number">10</span>;<br>    &#125;<br>    s[N]=c[N];<br>    <span class="hljs-built_in">string</span> sum;<br>    <span class="hljs-keyword">if</span>(s[N]==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>        sum+=s[N<span class="hljs-number">-1</span>-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=N;i++)<br>        sum+=s[N-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">minusint</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span><span class="hljs-comment">//a-b</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> an=getN(a);<br>    <span class="hljs-keyword">int</span> bn=getN(b);<br>    <span class="hljs-keyword">int</span> N=an;<br>    <span class="hljs-keyword">if</span>(an&lt;bn)N=bn;<br>    <span class="hljs-keyword">int</span> aa[N]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an;i++)aa[i]=a[an<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">int</span> bb[N]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;bn;i++)bb[i]=b[bn<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">int</span> r[N],bor[N+<span class="hljs-number">1</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    &#123;<br>        aa[i]-=bor[i];<br>        <span class="hljs-keyword">if</span>(aa[i]&lt;bb[i])<br>        &#123;<br>            r[i]=aa[i]-bb[i]+<span class="hljs-number">10</span>;<br>            bor[i+<span class="hljs-number">1</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            r[i]=aa[i]-bb[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=N<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    <span class="hljs-keyword">if</span>(r[i]!=<span class="hljs-number">0</span>)<br>    &#123;<br>        n=i+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>    &#125; <br>    <span class="hljs-built_in">string</span> result;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        result+=r[n-i<span class="hljs-number">-1</span>]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(result[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;\0&#x27;</span>)result+=<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">multi_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-built_in">string</span> b)</span><span class="hljs-comment">//个位数a乘b</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n=getN(b);<br>    <span class="hljs-keyword">int</span> bb[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    bb[i]=b[n<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">int</span> c[n+<span class="hljs-number">1</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> s[n+<span class="hljs-number">1</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        s[i]=(a*bb[i]+c[i])%<span class="hljs-number">10</span>;<br>        c[i+<span class="hljs-number">1</span>]=(a*bb[i]+c[i])/<span class="hljs-number">10</span>;<br>    &#125;<br>    s[n]=c[n];<br>    <span class="hljs-built_in">string</span> r;<br>    <span class="hljs-keyword">if</span>(s[n]==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        r+=s[n<span class="hljs-number">-1</span>-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br>        r+=s[n-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">add_0</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-built_in">string</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a;i++)<br>    &#123;<br>        b+=<span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">multiint</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span><span class="hljs-comment">//整数乘法</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> an=getN(a);<br>    <span class="hljs-keyword">int</span> aa[an];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an;i++)<br>    aa[i]=a[an<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-built_in">string</span> c=<span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an;i++)<br>    c=add(add_0(i,multi_1(aa[i],b)),c);<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">multi</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span><span class="hljs-comment">//含负数小数的乘法</span></span><br><span class="hljs-function"></span>&#123;<br>    a=examformat(a);<br>    b=examformat(b);<br>    <span class="hljs-keyword">bool</span> ta=<span class="hljs-number">0</span>,tb=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)ta=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(b[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)tb=<span class="hljs-number">1</span>;<br>    a=absint(a);<br>    b=absint(b);<br>    <span class="hljs-keyword">int</span> da=<span class="hljs-number">0</span>,db=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(c)da++;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;.&#x27;</span>)c=<span class="hljs-number">1</span>;<br>    &#125;<br>    c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;b[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(c)db++;<br>        <span class="hljs-keyword">if</span>(b[i]==<span class="hljs-string">&#x27;.&#x27;</span>)c=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> d=da;<br>    <span class="hljs-keyword">if</span>(db&gt;da)d=db;<br>    a=floattoint(a,d);<br>    b=floattoint(b,d);<br>    <span class="hljs-built_in">string</span> result;<br>    result=multiint(a,b);<br>    d+=d;<br>    result=inttofloat(result,d);<br>    <span class="hljs-keyword">if</span>(ta!=tb)result=<span class="hljs-string">&quot;-&quot;</span>+result;<br>    result=examformat(result);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">addab</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    a=examformat(a);<span class="hljs-comment">//万能预处理</span><br>    b=examformat(b);<br>    <span class="hljs-keyword">int</span> da=<span class="hljs-number">0</span>,db=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(c)da++;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;.&#x27;</span>)c=<span class="hljs-number">1</span>;<br>    &#125;<br>    c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;b[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(c)db++;<br>        <span class="hljs-keyword">if</span>(b[i]==<span class="hljs-string">&#x27;.&#x27;</span>)c=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> d=da;<br>    <span class="hljs-keyword">if</span>(db&gt;da)d=db;<br>    a=floattoint(a,d);<br>    b=floattoint(b,d);<span class="hljs-comment">//万能预处理</span><br>    <span class="hljs-built_in">string</span> result;<br>    <span class="hljs-keyword">bool</span> ta=<span class="hljs-number">0</span>,tb=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)ta=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(b[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)tb=<span class="hljs-number">1</span>;<br>    a=absint(a);<br>    b=absint(b);<br>    <span class="hljs-keyword">if</span>(ta==tb)<br>    &#123;<br>        result=add(a,b);<br>        <span class="hljs-keyword">if</span>(ta)<br>        result=<span class="hljs-string">&quot;-&quot;</span>+result;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">bool</span> c=compareint(a,b);<br>        <span class="hljs-keyword">if</span>(c)result=minusint(a,b);<br>        <span class="hljs-keyword">else</span> result=minusint(b,a);<br>        <span class="hljs-keyword">if</span>(c==ta)result=<span class="hljs-string">&quot;-&quot;</span>+result;<br>    &#125;<br>    result=inttofloat(result,d);<br>    result=examformat(result);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">aminusb</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    a=examformat(a);<br>    b=examformat(b);<br>    <span class="hljs-keyword">int</span> da=<span class="hljs-number">0</span>,db=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(c)da++;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;.&#x27;</span>)c=<span class="hljs-number">1</span>;<br>    &#125;<br>    c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;b[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(c)db++;<br>        <span class="hljs-keyword">if</span>(b[i]==<span class="hljs-string">&#x27;.&#x27;</span>)c=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> d=da;<br>    <span class="hljs-keyword">if</span>(db&gt;da)d=db;<br>    a=floattoint(a,d);<br>    b=floattoint(b,d);<br>    <span class="hljs-built_in">string</span> result;<br>    <span class="hljs-keyword">bool</span> ta=<span class="hljs-number">0</span>,tb=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)ta=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(b[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)tb=<span class="hljs-number">1</span>;<br>    a=absint(a);<br>    b=absint(b);<br>    <span class="hljs-keyword">if</span>(ta==tb)<br>    &#123;<br>        <span class="hljs-keyword">bool</span> c=compareint(a,b);<br>        <span class="hljs-keyword">if</span>(c)result=minusint(a,b);<br>        <span class="hljs-keyword">else</span> result=minusint(b,a);<br>        <span class="hljs-keyword">if</span>(c==ta)<br>        result=<span class="hljs-string">&quot;-&quot;</span>+result;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        result=add(a,b);<br>        <span class="hljs-keyword">if</span>(ta)result=<span class="hljs-string">&quot;-&quot;</span>+result;<br>    &#125;<br>    result=inttofloat(result,d);<br>    result=examformat(result);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">divideslint</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span><span class="hljs-comment">//same length</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    a=aminusb(a,b);<br>    <span class="hljs-keyword">while</span>(a[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;-&#x27;</span>)<br>    &#123;<br>        a=aminusb(a,b);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">divideint</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span><span class="hljs-comment">//a&gt;&gt;b</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> an=getN(a);<br>    <span class="hljs-keyword">int</span> bn=getN(b);<br>    <span class="hljs-built_in">string</span> c,result;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;bn;i++)c+=a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an-bn+<span class="hljs-number">1</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> current=divideslint(c,b);<br>        result+=current+<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-built_in">string</span> x;<br>        x+=<span class="hljs-string">&#x27;0&#x27;</span>+current;<br>        c=aminusb(c,multi(x,b));<br>        <span class="hljs-keyword">if</span>(i!=an-bn)c+=a[bn+i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b, <span class="hljs-keyword">bool</span> *c)</span><span class="hljs-comment">//a除以b,b不为0</span></span><br><span class="hljs-function"></span>&#123;<br>    a=examformat(a);<br>    b=examformat(b);<br>    <span class="hljs-keyword">bool</span> ta=<span class="hljs-number">0</span>,tb=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)ta=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(b[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)tb=<span class="hljs-number">1</span>;<br>    a=absint(a);<br>    b=absint(b);<br>    <span class="hljs-keyword">int</span> da=<span class="hljs-number">0</span>,db=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> cc=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(cc)da++;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;.&#x27;</span>)cc=<span class="hljs-number">1</span>;<br>    &#125;<br>    cc=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;b[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(cc)db++;<br>        <span class="hljs-keyword">if</span>(b[i]==<span class="hljs-string">&#x27;.&#x27;</span>)cc=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> d=da;<br>    <span class="hljs-keyword">if</span>(db&gt;da)d=db;<br>    b=floattoint(b,d);<br>    b=examformat(b);<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-string">&quot;0&quot;</span>)<br>    &#123;<br>        *c=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> bn=getN(b);<br>    a=floattoint(a,d+<span class="hljs-number">512</span>+bn);<br>    <span class="hljs-built_in">string</span> result=divideint(a,b);<br>    result=examformat(result);<br>    result=inttofloat(result,<span class="hljs-number">512</span>+bn);<br>    <span class="hljs-keyword">if</span>(ta!=tb)result=<span class="hljs-string">&quot;-&quot;</span>+result;<br>    result=examformat(result);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">natural</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    a=absint(a);<br>    <span class="hljs-keyword">int</span> c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>    c=i;<br>    <span class="hljs-built_in">string</span> result;<br>    <span class="hljs-keyword">if</span>(!c)<span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;c;i++)<br>    result+=a[i];<br>    result=examformat(result);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">powerint</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b,<span class="hljs-keyword">bool</span> *c)</span><span class="hljs-comment">//a^b</span></span><br><span class="hljs-function"></span>&#123;<br>    b=natural(b);<br>    <span class="hljs-keyword">if</span>(a==<span class="hljs-string">&quot;0&quot;</span>&amp;&amp;b!=<span class="hljs-string">&quot;0&quot;</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a==<span class="hljs-string">&quot;0&quot;</span>&amp;&amp;b==<span class="hljs-string">&quot;0&quot;</span>)<br>    &#123;<br>        *c=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a!=<span class="hljs-string">&quot;0&quot;</span>&amp;&amp;b==<span class="hljs-string">&quot;0&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> result=a;<br>        <span class="hljs-keyword">while</span>(b!=<span class="hljs-string">&quot;1&quot;</span>)<br>        &#123;<br>            result=multi(result,a);<br>            b=aminusb(b,<span class="hljs-string">&quot;1&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b,<span class="hljs-keyword">bool</span> *c)</span></span><br><span class="hljs-function"></span>&#123;<br>    a=examformat(a);<br>    b=examformat(b);<br>    <span class="hljs-keyword">bool</span> tb=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(b[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)tb=<span class="hljs-number">1</span>;<br>    b=absint(b);<br>    <span class="hljs-built_in">string</span> result;<br>    result=powerint(a,b,c);<br>    <span class="hljs-keyword">if</span>(tb)result=divide(<span class="hljs-string">&quot;1&quot;</span>,result,c);<br>    result=examformat(result);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">factorial</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-keyword">bool</span> *c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>    &#123;<br>        *c=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<br>    a=natural(a);<br>    <span class="hljs-keyword">if</span>(a==<span class="hljs-string">&quot;0&quot;</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> result=a;<br>        <span class="hljs-keyword">while</span>(a!=<span class="hljs-string">&quot;1&quot;</span>)<br>        &#123;<br>            result=multi(result,aminusb(a,<span class="hljs-string">&quot;1&quot;</span>));<br>            a=aminusb(a,<span class="hljs-string">&quot;1&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">transform</span><span class="hljs-params">(<span class="hljs-built_in">string</span> primary)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">string</span> subresult,result;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;primary[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(primary[i]==<span class="hljs-string">&#x27;-&#x27;</span>&amp;&amp;primary[i<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>        &#123;<br>            i++;<br>            <span class="hljs-built_in">string</span> curr=<span class="hljs-string">&quot;(0-&quot;</span>;<br>            <span class="hljs-keyword">while</span>((primary[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;primary[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;primary[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)||(primary[i]==<span class="hljs-string">&#x27;.&#x27;</span>))<br>            &#123;<br>                curr+=primary[i];<br>                i++;<br>            &#125;<br>            curr+=<span class="hljs-string">&#x27;)&#x27;</span>;<br>            subresult+=curr;<br>            subresult+=primary[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span> subresult+=primary[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;subresult[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(((subresult[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;subresult[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)||subresult[i]==<span class="hljs-string">&#x27;)&#x27;</span>)&amp;&amp;subresult[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>        &#123;<br>            result+=subresult[i];<br>            result+=<span class="hljs-string">&#x27;+&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> result+=subresult[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">ReversePolishForm</span><span class="hljs-params">(<span class="hljs-built_in">string</span> primary)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> chars[<span class="hljs-number">128</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    chars[<span class="hljs-string">&#x27;+&#x27;</span>]=<span class="hljs-number">1</span>;<br>    chars[<span class="hljs-string">&#x27;-&#x27;</span>]=<span class="hljs-number">1</span>;<br>    chars[<span class="hljs-string">&#x27;*&#x27;</span>]=<span class="hljs-number">2</span>;<br>    chars[<span class="hljs-string">&#x27;/&#x27;</span>]=<span class="hljs-number">2</span>;<br>    chars[<span class="hljs-string">&#x27;^&#x27;</span>]=<span class="hljs-number">3</span>;<br>    chars[<span class="hljs-string">&#x27;!&#x27;</span>]=<span class="hljs-number">3</span>;<br>    primary=transform(primary);<br>    <span class="hljs-built_in">string</span> result;<br>    <span class="hljs-keyword">char</span> simstack[inf];<br>    <span class="hljs-keyword">int</span> xn=<span class="hljs-number">0</span>,sn=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;primary[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>((primary[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;primary[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)||primary[i]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>        result+=primary[i];<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            result+=<span class="hljs-string">&#x27;,&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(chars[<span class="hljs-keyword">int</span>(primary[i])])<br>            &#123;<br>                <span class="hljs-comment">//xn++;</span><br>                <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(sn==<span class="hljs-number">-1</span>||simstack[sn]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                    &#123;<br>                        sn++;<br>                        simstack[sn]=primary[i];<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(chars[<span class="hljs-keyword">int</span>(primary[i])]&gt;chars[<span class="hljs-keyword">int</span>(simstack[sn])])<br>                    &#123;<br>                        sn++;<br>                        simstack[sn]=primary[i];<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        result+=simstack[sn];<br>                        <span class="hljs-comment">//xn++;</span><br>                        sn--;<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <br>            &#123;<br>                xn++;<br>                <span class="hljs-keyword">if</span>(primary[i]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                &#123;<br>                    sn++;<br>                    simstack[sn]=<span class="hljs-string">&#x27;(&#x27;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(sn!=<span class="hljs-number">-1</span>&amp;&amp;simstack[sn]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                        &#123;<br>                            sn--;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            result+=simstack[sn];<br>                            sn--;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(sn!=<span class="hljs-number">-1</span>)<br>    &#123;<br>        result+=simstack[sn];<br>        sn--;<br>    &#125;<br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(result[j]==<span class="hljs-string">&#x27;,&#x27;</span>)j++;<br>    <span class="hljs-built_in">string</span> finalresult;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=j;result[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    finalresult+=result[i];<br>    <span class="hljs-keyword">return</span> finalresult;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">calculateit</span><span class="hljs-params">(<span class="hljs-built_in">string</span> primary,<span class="hljs-keyword">bool</span> *c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">string</span> a[<span class="hljs-number">1023</span>];<br>    <span class="hljs-keyword">int</span> an=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> test=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;primary[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(*c)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>((primary[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;primary[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)||primary[i]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(test)<br>            &#123;<br>                an++;<br>                a[an]=<span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>            test=<span class="hljs-number">0</span>;<br>            a[an]+=primary[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(primary[i]==<span class="hljs-string">&#x27;,&#x27;</span>)<br>        test=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">switch</span> (primary[i])<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                    <br>                    an--;<br>                    a[an]=addab(a[an],a[an+<span class="hljs-number">1</span>]);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    <br>                    an--;<br>                    a[an]=aminusb(a[an],a[an+<span class="hljs-number">1</span>]);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                <br>                    an--;<br>                    a[an]=multi(a[an],a[an+<span class="hljs-number">1</span>]);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br><br>                    an--;<br>                    a[an]=divide(a[an],a[an+<span class="hljs-number">1</span>],c);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;^&#x27;</span>:<br><br>                    an--;<br>                    a[an]=power(a[an],a[an+<span class="hljs-number">1</span>],c);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;!&#x27;</span>:<br><br>                    a[an]=factorial(a[an],c);<br>                    <span class="hljs-keyword">break</span>;<br><br>            <br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">delnbsp</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">string</span> result;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    <span class="hljs-keyword">if</span>(a[i]!=<span class="hljs-string">&#x27; &#x27;</span>)<br>    result+=a[i];<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">setprecise</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>    c=i;<br>    <span class="hljs-keyword">if</span>(!c)<span class="hljs-keyword">return</span> a;<br>    <span class="hljs-built_in">string</span> result;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;i&lt;=(b+c);i++)<br>    result+=a[i];<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>    <span class="hljs-keyword">char</span> x[<span class="hljs-number">65535</span>];<br>    <span class="hljs-keyword">bool</span> c=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">string</span> a;<br>    <span class="hljs-built_in">cin</span>.getline(x,<span class="hljs-number">65535</span>);<br>    a=delnbsp(x);<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>    a=<span class="hljs-string">&quot;0&quot;</span>+a;<br>    a=ReversePolishForm(a);<br>    <span class="hljs-comment">//a=transform(a);</span><br>    <span class="hljs-comment">//cout&lt;&lt;a.c_str()&lt;&lt;endl;</span><br>    a=calculateit(a,&amp;c);<br>    <span class="hljs-keyword">if</span>(c)a=<span class="hljs-string">&quot;Error !&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        a=setprecise(a,<span class="hljs-number">100</span>);<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;a.c_str()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>





<p>P.S：代码太乱，目不忍视，但毕竟是花了些时间的大作业，留个纪念吧……</p>
]]></content>
      <categories>
        <category>算法学习</category>
        <category>作业</category>
      </categories>
      <tags>
        <tag>高精</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2021/02/02/2021-2-2/</url>
    <content><![CDATA[<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><h6 id="BinarySearch"><a href="#BinarySearch" class="headerlink" title="BinarySearch"></a>BinarySearch</h6><p>&nbsp;</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>类似二分法</p>
<p>用于顺序存储结构</p>
<h4 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h4><p>面对问题时有两种思考方式</p>
<ul>
<li>不断缩小查找范围直到找到最优解</li>
<li>不断排除“必不可能为最优解的解”，直至最后</li>
</ul>
<blockquote>
<p>我一直在想怎么来说明二分查找“一定不会漏掉最优解”，这里的第二种思考方式能很好地解释这一问题。</p>
</blockquote>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p>Q：查找最接近的元素</p>
<p>描述</p>
<blockquote>
<p>在一个非降序列中，查找与给定值最接近的元素。</p>
</blockquote>
<p>输入</p>
<blockquote>
<p>第一行包含一个整数n，为非降序列长度。1 &lt;= n &lt;= 100000。<br>第二行包含n个整数，为非降序列各元素。所有元素的大小均在0-1,000,000,000之间。<br>第三行包含一个整数m，为要询问的给定值个数。1 &lt;= m &lt;= 10000。<br>接下来m行，每行一个整数，为要询问最接近元素的给定值。所有给定值的大小均在0-1,000,000,000之间。</p>
</blockquote>
<p>输出</p>
<blockquote>
<p>m行，每行一个整数，为最接近相应给定值的元素值，保持输入顺序。若有多个值满足条件，输出最小的一个。</p>
</blockquote>
<p>样例输入</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span> <span class="hljs-number">8</span><br><span class="hljs-number">2</span><br><span class="hljs-number">10</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>

<p>y样例输出</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">8</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>

<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h6 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h6><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>,r=n<span class="hljs-number">-1</span>,m,ans=<span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">while</span>(l&lt;=r)<br>    &#123;<br>        m=l+(r-l)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[m]-x)&lt;<span class="hljs-built_in">abs</span>(ans-x))<br>        ans=a[m];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[m]-x)==<span class="hljs-built_in">abs</span>(ans-x))<br>        ans=min(ans,a[m]);<br>        <span class="hljs-keyword">if</span>(a[m]&lt;x)<br>        l=m+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[m]&gt;x)<br>        r=m<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;   <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m,a[<span class="hljs-number">100001</span>];<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    <span class="hljs-built_in">cin</span>&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>        x=find(a,n,x);<br>        <span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h6 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h6><ul>
<li>L4 ~ L21为二分查找</li>
<li>考虑将中间的值与要找的数”x”做差，算绝对值，比较中间值与”x”的大小<strong>假设中间值小于”x”，那么中间值左侧的数据与”x”差的绝对值会更大，必不可能为最优解，因此舍弃</strong></li>
<li>用中间值计算得到的结果已经判断过，因此查找时<code>r=m-1</code>或者<code>l=m+1</code>不会造成漏解</li>
<li>L7中<code>while(l&lt;=r)</code>说明查找范围包含两端的数据</li>
</ul>
]]></content>
      <categories>
        <category>算法学习</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>指针变量学习笔记</title>
    <url>/2021/01/30/2021-1-30/</url>
    <content><![CDATA[<h2 id="指针变量学习笔记"><a href="#指针变量学习笔记" class="headerlink" title="指针变量学习笔记"></a>指针变量学习笔记</h2><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>指针变量是一种变量类型（好像是废话）（但是个人认为这句话特别重要）</p>
<p>指针变量的值：某一内存地址的编号（这个内存地址上存有一个变量，就说这个指针指向这个变量；如果这个内存地址上没有存任何东西，就说这个指针是空指针）</p>
<blockquote>
<p>或许用一种类比的方法更容易理解：</p>
<p>你面前有五个袋子，从左到右依次排列，分别编号一二三四五；</p>
<p>定义一个int变量<code>int a=9</code>，假设存放在第三个袋子中。好，现在打开第三个袋子，你看到 “9”这个数字。</p>
<p>定义一个指针变量p，指向a，假设指针p存放在第二个袋子中。好，现在打开第二个袋子，你看到的是 “第三个袋子” 这样一行字。</p>
</blockquote>
<h4 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h4><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><p>例如：声明一个指针p，这个指针p指向一个int类型的变量a，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> a = <span class="hljs-number">12345</span>;   <span class="hljs-comment">//随便想的一个数，没啥特殊意思</span><br><span class="hljs-keyword">int</span> *p = &amp;a;<br></code></pre></td></tr></table></figure>

<p>解释一下：<code>int *p</code> 里面<code>int *</code>是变量类型，表示 “一个指向int类型变量的指针” ，<code>p</code> 是变量名，<code>&amp;a</code> 中&amp;是 “取址符号” ，<code>&amp;a</code>表示a的内存地址。</p>
<p>上面第二行代码意思就是：声明一个变量 p ，类型是指向int变量的指针，同时给这个变量赋值，值是一串内存地址，这个内存地址上存放着一个int变量a。</p>
<p>或许第二行写成如下形式更容易理解：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> *p;   <span class="hljs-comment">//定义一个指针变量，变量名为p</span><br>p = &amp;a;   <span class="hljs-comment">//p的值是a所在的内存地址</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>按照上面的类比，&amp;a就是“第三个袋子”这样一行字，p=&amp;a就是将这个地址名赋给了p</p>
</blockquote>
<h5 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h5><p>用到取值符号<code>*</code>：</p>
<p>p是这个指针变量的变量名，加上* 变成 *p 意思就是 “p所指地址上的变量的值” </p>
<blockquote>
<p>按照上面的类比，p就是”第三个袋子“这一行字，*p就是“第三个袋子里面的值”，也就是说 *p == a是成立的。</p>
</blockquote>
]]></content>
      <categories>
        <category>算法学习</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>高精加和高精乘（正整数）</title>
    <url>/2021/01/29/2021-1-29/</url>
    <content><![CDATA[<h2 id="高精加和高精乘"><a href="#高精加和高精乘" class="headerlink" title="高精加和高精乘"></a>高精加和高精乘</h2><h6 id="仅正整数"><a href="#仅正整数" class="headerlink" title="仅正整数"></a>仅正整数</h6><h4 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h4><h5 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h5><p>核心：模拟笔算</p>
<p>即用数组里的每个元素来作为笔算加法竖式的每一位</p>
<p>为规范化以及移植性，输入输出均为string</p>
<p>步骤：</p>
<ol>
<li>将字符串存入数组a和b</li>
<li>另外定义两个数组s和c，分别存储每一位的结果值和进位值</li>
<li>c[0]的值为0，s[i]的值是(a[i]+b[i]+c[i])%10，c[i]的值是(a[i]+b[i]+c[i])/10，以此类推，完成所有位数的相加</li>
<li>将数组元素存入新定义的string中</li>
</ol>
<p>注意事项：</p>
<blockquote>
<ul>
<li>对数组int a[10]的理解：包含a[0]，a[1]，a[2]，…，a[9]共10个元素</li>
<li>string类：按顺序往里填入元素时（步骤4），用<code>str+ =  &#39;单个元素&#39;</code>，表示结束时如果用赋值的方法（比如<code>str[2] = &#39;\0&#39;;</code>），可能引起后续对该字符串的操作出错</li>
<li>输出string类：调用函数<code> cout&lt;&lt;sum.c_str()&lt;&lt;endl;</code>（因为不能直接输出）（可以试试）</li>
</ul>
</blockquote>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getN</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[n]!=<span class="hljs-string">&#x27;\0&#x27;</span>)n++;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">string</span> a,b;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">int</span> an=getN(a);<br>    <span class="hljs-keyword">int</span> bn=getN(b);<br>    <span class="hljs-keyword">int</span> N=an;<br>    <span class="hljs-keyword">if</span>(an&lt;bn)N=bn;<br>    <span class="hljs-keyword">int</span> aa[N]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an;i++)aa[i]=a[an<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">int</span> bb[N]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;bn;i++)bb[i]=b[bn<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">int</span> s[N+<span class="hljs-number">1</span>],c[N+<span class="hljs-number">1</span>];<br>    c[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    &#123;<br>        s[i]=(aa[i]+bb[i]+c[i])%<span class="hljs-number">10</span>;<br>        c[i+<span class="hljs-number">1</span>]=(aa[i]+bb[i]+c[i])/<span class="hljs-number">10</span>;<br>    &#125;<br>    s[N]=c[N];<br>    <span class="hljs-built_in">string</span> sum;<br>    <span class="hljs-keyword">if</span>(s[N]==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>        sum+=s[N<span class="hljs-number">-1</span>-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=N;i++)<br>        sum+=s[N-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;sum.c_str()&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h4><h5 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h5><p>先实现个位数乘多位的整数（输入输出均为字符串），再在经过对应补零操作后用高精加，实现高精度乘法</p>
<blockquote>
<p>至于为什么不用高精度累加来代替乘法，原因：肉眼可见的复杂度</p>
</blockquote>
<h5 id="个位数乘多位整数"><a href="#个位数乘多位整数" class="headerlink" title="个位数乘多位整数"></a>个位数乘多位整数</h5><p>注意事项：同高精度加法，不再赘述</p>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getN</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[n]!=<span class="hljs-string">&#x27;\0&#x27;</span>)n++;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-built_in">string</span> b;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">int</span> n=getN(b);<br>    <span class="hljs-keyword">int</span> bb[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    bb[i]=b[n<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">int</span> c[n+<span class="hljs-number">1</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> s[n+<span class="hljs-number">1</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        s[i]=(a*bb[i]+c[i])%<span class="hljs-number">10</span>;<br>        c[i+<span class="hljs-number">1</span>]=(a*bb[i]+c[i])/<span class="hljs-number">10</span>;<br>    &#125;<br>    s[n]=c[n];<br>    <span class="hljs-built_in">string</span> r;<br>    <span class="hljs-keyword">if</span>(s[n]==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        r+=s[n<span class="hljs-number">-1</span>-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br>        r+=s[n-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;r.c_str()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<h5 id="多位数乘多位数"><a href="#多位数乘多位数" class="headerlink" title="多位数乘多位数"></a>多位数乘多位数</h5><p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getN</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[n]!=<span class="hljs-string">&#x27;\0&#x27;</span>)n++;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> an=getN(a);<br>    <span class="hljs-keyword">int</span> bn=getN(b);<br>    <span class="hljs-keyword">int</span> N=an;<br>    <span class="hljs-keyword">if</span>(an&lt;bn)N=bn;<br>    <span class="hljs-keyword">int</span> aa[N]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an;i++)<br>        aa[i]=a[an<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">int</span> bb[N]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;bn;i++)<br>        bb[i]=b[bn<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">int</span> s[N+<span class="hljs-number">1</span>],c[N+<span class="hljs-number">1</span>];<br>    c[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    &#123;<br>        s[i]=(aa[i]+bb[i]+c[i])%<span class="hljs-number">10</span>;<br>        c[i+<span class="hljs-number">1</span>]=(aa[i]+bb[i]+c[i])/<span class="hljs-number">10</span>;<br>    &#125;<br>    s[N]=c[N];<br>    <span class="hljs-built_in">string</span> sum;<br>    <span class="hljs-keyword">if</span>(s[N]==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>        sum+=s[N<span class="hljs-number">-1</span>-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=N;i++)<br>        sum+=s[N-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">multi_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-built_in">string</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n=getN(b);<br>    <span class="hljs-keyword">int</span> bb[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    bb[i]=b[n<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">int</span> c[n+<span class="hljs-number">1</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> s[n+<span class="hljs-number">1</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        s[i]=(a*bb[i]+c[i])%<span class="hljs-number">10</span>;<br>        c[i+<span class="hljs-number">1</span>]=(a*bb[i]+c[i])/<span class="hljs-number">10</span>;<br>    &#125;<br>    s[n]=c[n];<br>    <span class="hljs-built_in">string</span> r;<br>    <span class="hljs-keyword">if</span>(s[n]==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        r+=s[n<span class="hljs-number">-1</span>-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br>        r+=s[n-i]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">add_0</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-built_in">string</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a;i++)<br>    &#123;<br>        b+=<span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">string</span> a,b;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">int</span> an=getN(a);<br>    <span class="hljs-keyword">int</span> aa[an];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an;i++)<br>    aa[i]=a[an<span class="hljs-number">-1</span>-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-built_in">string</span> c=<span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;an;i++)<br>    c=add(add_0(i,multi_1(aa[i],b)),c);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;c.c_str()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>核心思想是模拟竖式计算</p>
<p>注意string类的用法</p>
<p>PS: 其实这一篇博客还是为了测试</p>
]]></content>
      <categories>
        <category>算法学习</category>
        <category>作业</category>
      </categories>
      <tags>
        <tag>高精</tag>
      </tags>
  </entry>
  <entry>
    <title>To my devoted ones</title>
    <url>/2020/12/05/2020-12-5/</url>
    <content><![CDATA[<p>Oh, I was 22 years old</p>
<p>&nbsp;</p>
<p>My mother told me that you learn more as you go</p>
<p>&nbsp;</p>
<p>But I’ve spent many nights alone</p>
<p>&nbsp;</p>
<p>Do I need more for me to make this house a home</p>
<p>&nbsp;</p>
<p>‘Cause sometimes there’s more to the story</p>
<p>&nbsp;</p>
<p>And they don’t know what’s going on in</p>
<p>&nbsp;</p>
<p>My life behind closed doors</p>
<p>&nbsp;</p>
<p>Maybe there is nothing wrong</p>
<p>&nbsp;</p>
<p>And I will keep holding on</p>
<p>&nbsp;</p>
<p>I know I can be strong</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>​          &emsp;        &emsp;             &emsp;    &emsp;    &emsp;                              &emsp;         &emsp;                                        ——My Blood &lt; Westlife &gt;</p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;just for test&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<p>Just For Test      <code> just for  test</code></p>
]]></content>
      <categories>
        <category>胡言乱语</category>
      </categories>
  </entry>
  <entry>
    <title>起点</title>
    <url>/2020/11/26/2020-11-26/</url>
    <content><![CDATA[<h1 id="起点"><a href="#起点" class="headerlink" title="起点"></a>起点</h1><p>我一直在想要怎样以一个较为正式的开头来开启我的博客之旅，之后觉得大可不必。怎样开头都算是开头，如果说我直接进入正题 ，没了开头，其实也问题不大。现在的我，在武汉大学信息学部国软教学楼B4-201教室，现在的时间是21：27，今天是11月26日，在2020年，我写下了，一篇名为《起点》的博客。</p>
<p>从上上周起，我开始学习C++，然后参加了几天前的新生赛。</p>
<p>然后沉迷于代码之中，无法自拔……以至于……以至于高数掉了几节课，英语小测差点不及格？（wawa大哭）</p>
<p>我不知道未来会怎么样，但是捣鼓这个东西，的确给了我快乐。我意识到我是喜欢这个东西的。所以我选择“冲冲冲”。有幸遇到了学长学姐，有幸遇到了同专业的、有着同样想法的同学，有幸看着身边的人跟我一样，从零基础开始努力，有幸听了ACM宣讲……我遇见过不那么快乐的事，也遇上了很多很棒的事，你看这个世界是复杂的，看不太懂，你看这一行行代码也挺复杂的。</p>
<p>我想要，走上这条路，我想要将宝贵的大学时光分一些给它，即使是从零开始，即使是暂时远远落后。我不知道将会怎样，我也不必想将来会怎样，我只需要知道：这一刻我是快乐的，我确实是在为一个目标努力着，它仿佛就在眼前，触手可及。我会试着，会努力安排好学习生活，这是给自己一个交待。</p>
<p>然后，我开通了许久的博客，有了第一篇它正式的内容。现在的我在自习室，时间是21：53，明天晚上有一门课的开卷考试。</p>
<p>这是我的起点。</p>
<p>2020/11/26</p>
]]></content>
      <categories>
        <category>胡言乱语</category>
      </categories>
  </entry>
</search>
